<<<<<<< Updated upstream
words3 %>%
count(word) %>%
top_n(1, n) %>%
pull(n)
afinn <- get_sentiments("afinn")
Yes
install.packages("textdata")
library(textdata)
afinn <- get_sentiments("afinn")
afinn_sentiments <- inner_join(afinn, by = "word")
afinn_sentiments <- words3 %>% inner_join(afinn, by = "word")
View(afinn)
View(afinn_sentiments)
afinn_sentiments %>% filter(value > 0) %>% pull(value) %>% sum()
afinn_sentiments %>% filter(value > 0) %>% pull(value) %>% count()
afinn_sentiments %>% filter(value > 0) %>% pull(value) %>% nrows()
afinn_sentiments %>% filter(value > 0) %>% pull(value) %>% nrow()
afinn_sentiments %>% filter(value > 0)
afinn_sentiments %>% filter(value > 0) %>% nrow()
afinn_sentiments %>% filter(value == 4) %>% nrow()
afinn_sentiments %>% filter(value >= 1) %>% nrow()
3414/6065
library(pdftools)
options(digits = 3)
install.packages("pdftools")
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
system("cmd.exe", input = paste("start", fn))
txt <- pdf_text(fn)
x <- txt[[9]] %>% str_split("\\n")
View(x)
View(x)
View(x)
x
s <- x[[1]]
s <- s %>% str_trim(side = "both")
s[[1]]
header_index <- str_which(s, "2015")
header_index
header_index <- header_index[[1]]
header_index
header <- s[[3]]
header %>% str_split("\\s+")
header %>% str_split("\\s+" simplify = TRUE)
header %>% str_split("\\s+", simplify = TRUE)
month <- header %>% str_split("\\s+", simplify = TRUE)[1]
month <- str_split(header, "\\s+", simplify = TRUE)[1]
header <- str_split(header, "\\s+", simplify = TRUE)[-1]
s
total_index <- 36
tail_index <- total_index
n <- str_count(s, "\\d+")
filter(n, n == "1")
n
s <- str_remove(s, header_index)
out <- c(1:header_index, which(n==1), tail_index:length(s))
s <- s[-out]
s <- str_remove_all(s, "[^\\d]")
s <- str_remove_all(s, "[^\\d\\s]")
s <- x[[1]]
s <- str_trim(s)
s <- s[-out]
s <- str_remove_all(s, "[^\\d\\s]")
s <- str_split_fixed(s, "\\s+", n = 6)[,1:5]
View(s)
setNames(s = c("day", "header", "header", "header", "header"))
names(s) <- c("day", "header", "header", "header", "header")
View(s)
View(s)
names(s) <- c("day", "header", "header", "header", "header")
View(s)
setNames(s, c("day", "header", "header", "header", "header"))
View(s)
View(s)
names(s) <- c("day", "header", "header", "header", "header")
s
s <- x[[1]]
s <- str_trim(s)
s <- s[-out]
s <- str_remove_all(s, "[^\\d\\s]")
s <- str_split_fixed(s, "\\s+", n = 6)[,1:5]
View(s)
s
as.numeric(s)
tab <- names(s, c("day", "2015", "2016", "2017", "2018")) %>% as.numeric() %>% mutate(month = "Sep")
class(S)
class(s)
colnames(s) <- c("day", header)
s
tab <- as.numeric(s)
tab
st <- s %>% mutate(month = month)
tab %>% mutate(month = month)
View(s)
mean(s$2015)
mean(s[2])
s[2]
s[2,2]
tab[2,2]
tab <- s %>%
as_data_frame() %>%
mutate_all(as.numeric)
View(tab)
library(Lahman)
=======
source("~/.active-rstudio-document", echo=TRUE)
>>>>>>> Stashed changes
library(tidyverse)
library(caret)
library(rpart)
library(broom)
<<<<<<< Updated upstream
install.packages("pROC")
install.packages(c('spData', 'spDataLarge', 'tmap', 'leaflet'))
library(sf)
library(raster)
library(dplyr)
library(tmap)
library(leaflet)
library(ggplot2)
library(raster)
# Tosin's code for prepping, training, and testing
# SKor Data
setwd("~/R/UCL/BENV0091/EDA-Project/EDA-Project/R")
library(tidyverse)
library(rpart) # for regression trees
library(caret) # for splitting into train and test sets
df <- read_csv("../data/sKor_data_tot_v02.csv")
excluded_vars <- c("X1", "id_hs", "id_hh") #removing IDs so I can comfortably use (.)
df <- df %>% dplyr::select(-excluded_vars)
# r said to use `all_of(excluded_vars)` to silence warning but
# it worked sooo
#changing all cat_ variables to factors
df <- df %>% mutate(across(starts_with("cat"), as.factor))
set.seed(123)
train_index <- createDataPartition(df$num_tot_energy_heat, times = 1,
p = 0.7, list = FALSE)
#meant to create partition on the y values, as it stratifies that data
train <- df %>% slice(train_index)
test <- df %>% slice(-train_index)
#rpart tuning parameters: cp, minsplit, minbucket, maxdepth
#see rpart.control for explanations
#cross validation to pick the best tuning parameters
train_rpart <- train(num_tot_energy_heat ~ .,
method = "rpart",
tuneGrid = data.frame(cp = seq(0, 0.05, len = 25)),
data = train)
best_cp <- train_rpart$bestTune
train_rpart[["finalModel"]][["cptable"]]
plot(train_rpart$finalModel, margin = 0.1)
text(train_rpart$finalModel, cex = 0.75)
hyper_grid <- expand.grid(
minsplit = seq(20, 60, 1),
maxdepth = seq(30, 60, 1)
)
View(hyper_grid)
View(best_cp)
View(train_rpart)
train_rpart[["finalModel"]]
summary(train_rpart[["finalModel"]])
train_rpart[["results"]]
best_cp <- train_rpart$bestTune
best_cp
train_rpart[["results"]][best_cp]
train_rpart[["results"]][[5]]
train_rpart[["results"]][5]
train_rpart[["results"]][,5]
train_rpart[["results"]][5,]
#very rudimentary way of sourcing the row with the best cp but oh well
train_rpart[["results"]][which.min(RMSE)]
#very rudimentary way of sourcing the row with the best cp but oh well
train_rpart[["results"]][which.min("RMSE")]
?rpart.control
train_rpart <- train(num_tot_energy_heat ~ .,
method = "rpart",
tuneGrid = data.frame(cp = seq(0, 0.05, len = 25)),
trainControl(method = "repeatedcv",
number = 10),
data = train)
best_cp <- train_rpart$bestTune
?train
train_rpart <- train(num_tot_energy_heat ~ .,
method = "rpart",
tuneGrid = data.frame(cp = seq(0, 0.05, len = 25)),
trControl = trainControl(method = "repeatedcv",
number = 10),
data = train)
View(train_rpart)
best_cp <- train_rpart$bestTune
View(best_cp)
train_rpart[["results"]]
View(best_cp)
View(best_cp)
View(test)
write.csv(test,"../data/sKor_test_data", row.names = FALSE)
write.csv(test,"../data/sKor_test_data.csv", row.names = FALSE)
write.csv(train,"../data/sKor_train_data.csv", row.names = FALSE)
plot(train_rpart$finalModel, margin = 0.1)
text(train_rpart$finalModel, cex = 0.75)
rpart_fit <- train_rpart$finalModel
View(rpart_fit)
?predict
predictions <- predict(fit, train)
predictions <- predict(rpart_fit, train)
predictions <- predict(rpart_fit, newdata =train)
View(rpart_fit)
predictions <- predict(rpart_fit, newdata = train, type = "class")
rpart_fit <- rpart(num_tot_energy_heat ~.,
rpart.control(cp = 0.0041666),
data = train)
rpart_fit <- rpart(num_tot_energy_heat ~.,
rpart.control(cp = 0.0041666),
data = train
)
rpart_fit <- rpart(num_tot_energy_heat ~.,
data = train)
rpart_fit <- rpart(num_tot_energy_heat ~.,
control = rpart.control(cp = 0.0041666),
data = train)
predictions <- predict(rpart_fit, newdata = train, type = "class")
predictions <- predict(rpart_fit, newdata = train, type = "vector")
results <- train %>% transmute(
actual = num_tot_energy_heat,
predicted = predictions,
residuals = actual-predicted
)
View(results)
caret_fit <- train_rpart$finalModel
car_preds <- predictions <- predict(caret_fit, newdata = train, type = "vector")
caret_fit == rpart_fit
View(rpart_fit)
View(caret_fit)
caret_pred <- predict(train_rpart, newdata = train, type = "vector")
caret_pred <- predict(train_rpart, newdata = train, type = "raw")
results <- train %>% transmute(
actual = num_tot_energy_heat,
predicted = predictions,
residuals = actual-predicted,
caret_pred = caret_pred
)
results <- train %>% transmute(
actual = num_tot_energy_heat,
predicted = predictions,
caret_pred = caret_pred,
residuals = actual-predicted,
caret_res = actual - caret_pred
)
View(results)
View(rpart_fit)
View(caret_fit)
View(rpart_fit)
View(train_rpart)
View(caret_fit)
=======
library(rpart)
library(randomForest)
# bring in data and inspect data
#make category (factors)
df <- read_csv("C:/Users/Admin/EDA-Project/data/sKor_data_tot_v02.csv")
df <- df %>% mutate(across(starts_with("cat"), as.factor))
summary(df)
set.seed(100)
train <- sample(nrow(df), 0.7*nrow(df), replace = FALSE)
training_set<- df[train,]
testing_set <- df[-train,]
train_rf <- sample(nrow(df), 0.1*nrow(df), replace = FALSE)
train_rf_set <- df[train,]
View(train_rf_set)
View(train_rf_set)
train_rf_set <- df[train_rf,]
#cross validation with validation data
#ensure you discuss that random forest isnnot intutative.
library(e1071)
#k-fold cross validatiotrcontrol <- trainControl(method = "cv", number = 10,search="grid")
set.seed(100)
rf_default <- train(num_tot_energy_heat~.,
data = train_rf_set,
method = "ranger",
metric = "RMSE",
trcontrol = trcontrol
)
>>>>>>> Stashed changes
